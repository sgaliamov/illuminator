<#@ template debug="false" hostspecific="true" language="C#" compilerOptions="optimize+" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
/*
   ___ ___ _  _ ___ ___    _ _____ ___ ___     ___ ___  ___  ___
  / __| __| \| | __| _ \  /_\_   _| __|   \   / __/ _ \|   \| __|
 | (_ | _|| .` | _||   / / _ \| | | _|| |) | | (_| (_) | |) | _|
  \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/   \___\___/|___/|___|

*/

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace Illuminator
{
    public static class Functional
    {
        public static Action<ILEmitter> Execute(Func<ILEmitter, ILEmitter> action) => il => action(il);
<#
    var text = File.ReadAllText(Host.ResolvePath("ILEmitter.cs"));
    var matches= new Regex("[^/{2}]public ILEmitter ([^\\(]*)\\(([^\\(]*)\\)").Matches(text);
    var genericParameters = new Regex("<.*?>");
    var argumentsSeparator = new [] { ',' };
    var spaceSeparator = new [] { ' ' };

    foreach (System.Text.RegularExpressions.Match match in matches) {
        var name = match.Groups[1].Value;
        if (name.StartsWith("Debug")) {
            continue;
        }

        var parameters = match.Groups[2].Value;
        if (parameters.Contains("out ")) {
            continue;
        }

        if (string.IsNullOrWhiteSpace(parameters)) {
            continue;
        }

        var items = genericParameters
            .Replace(parameters, "")
            .Split(argumentsSeparator, StringSplitOptions.RemoveEmptyEntries)
            .Select(x => x.Split(spaceSeparator, StringSplitOptions.RemoveEmptyEntries).Last())
            .ToArray();

        var args = string.Join(", ", items);
#>
        public static Action<ILEmitter> <#= name #>(<#= parameters #>) => il => il.<#= name #>(<#= args #>);
<#
    }
#>
    }
}
